<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on Pacblog</title>
    <link>http://wangliang.one/blog/categories/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on Pacblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 13 Jan 2016 12:13:19 +0800</lastBuildDate>
    <atom:link href="http://wangliang.one/blog/categories/%E7%BC%96%E7%A8%8B/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>用GNU parallel实现简单的并行</title>
      <link>http://wangliang.one/blog/archives/parallel/</link>
      <pubDate>Wed, 13 Jan 2016 12:13:19 +0800</pubDate>
      
      <guid>http://wangliang.one/blog/archives/parallel/</guid>
      <description>

&lt;p&gt;有一些地震学软件运行要很长时间，如果可以并行计算就会节约时间。&lt;/p&gt;

&lt;h1 id=&#34;并行基本概念&#34;&gt;并行基本概念&lt;/h1&gt;

&lt;p&gt;据LUG里比较专业的Linuxer介绍，多开几个终端，不能自动的分配核。
另外，不并行完成一个程序所用时间除以并行完成所用的时间之商与计算机核数相等是并行优化的极限。&lt;/p&gt;

&lt;h1 id=&#34;安装和使用gnu-parallel&#34;&gt;安装和使用GNU parallel&lt;/h1&gt;

&lt;p&gt;执行这个命令安装::&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(wget -O - pi.dk/3 || curl pi.dk/3/) | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这么使用::&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parallel  --max-procs 8 echo {} ::: &amp;quot;1 7&amp;quot; &amp;quot;8 14&amp;quot; &amp;quot;15 21&amp;quot; &amp;quot;22 28&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个命令会让echo并行执行。8是指最多的计算机核数，&amp;rdquo;1 7&amp;rdquo;这些是传给echo的参数。
我学习并行的时间不足两小时。我试验的情况是，&amp;rdquo;1 7&amp;rdquo;是作为一个参数传入的，而不是两个。
所以如果你用的是perl::&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parallel  --max-procs 8 &#39;perl nll.pl&#39; {} ::: &amp;quot;events 2 2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，perl会认为你传入的是一个参数，内容是events空格2空格2，而不是3个。
目前，除了改perl脚本我还不知道这如何处理。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git常用命令</title>
      <link>http://wangliang.one/blog/archives/git-commands/</link>
      <pubDate>Fri, 04 Dec 2015 12:13:19 +0800</pubDate>
      
      <guid>http://wangliang.one/blog/archives/git-commands/</guid>
      <description>

&lt;p&gt;使用git，多数时候的思路是编辑、add、commit、push。
但是有时还需要回退、rebase等。
这部分命令往往因为使用较少，而常常记不清，所以进行一些总结。&lt;/p&gt;

&lt;h1 id=&#34;和提交有关&#34;&gt;和提交有关&lt;/h1&gt;

&lt;p&gt;添加或修改文件的修改提交到暂存区(记住：git跟踪的是修改！)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add &amp;lt;fileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除文件的修改提交到暂存区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm &amp;lt;fileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交到仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m&amp;quot;&amp;lt;提交理由&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将工作目录中已经跟踪的文件直接提交到仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -a
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;和撤销有关&#34;&gt;和撤销有关&lt;/h1&gt;

&lt;p&gt;撤销工作目录的修改&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -- &amp;lt;fileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;撤销到暂存区的提交&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset HEAD &amp;lt;fileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;版本库回退,修改放回工作区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;版本库回退,修改不放回工作区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset --hard HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令撤销&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reflog
git reset --hard &amp;lt;commit_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;和变基提交有关&#34;&gt;和变基提交有关&lt;/h1&gt;

&lt;p&gt;手动变基&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase -i master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自动变基&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase master
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;和远程库有关&#34;&gt;和远程库有关&lt;/h1&gt;

&lt;p&gt;删除远程库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin --delete &amp;lt;branchName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>