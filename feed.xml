<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pacblog</title>
    <link>http://blog.wangliang.one/</link>
    <description>Recent content on Pacblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 08 Oct 2016 20:29:00 +0800</lastBuildDate>
    <atom:link href="http://blog.wangliang.one/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>about</title>
      <link>http://blog.wangliang.one/about/</link>
      <pubDate>Sat, 08 Oct 2016 20:29:00 +0800</pubDate>
      
      <guid>http://blog.wangliang.one/about/</guid>
      <description>

&lt;h2 id=&#34;关于&#34;&gt;关于&lt;/h2&gt;

&lt;p&gt;My Notes 是我的一份关于地震学和计算机的网络笔记。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用GNU parallel实现简单的并行</title>
      <link>http://blog.wangliang.one/archives/parallel/</link>
      <pubDate>Wed, 13 Jan 2016 12:13:19 +0800</pubDate>
      
      <guid>http://blog.wangliang.one/archives/parallel/</guid>
      <description>

&lt;p&gt;有一些地震学软件运行要很长时间，如果可以并行计算就会节约时间。&lt;/p&gt;

&lt;h1 id=&#34;并行基本概念&#34;&gt;并行基本概念&lt;/h1&gt;

&lt;p&gt;据LUG里比较专业的Linuxer介绍，多开几个终端，不能自动的分配核。
另外，不并行完成一个程序所用时间除以并行完成所用的时间之商与计算机核数相等是并行优化的极限。&lt;/p&gt;

&lt;h1 id=&#34;安装和使用gnu-parallel&#34;&gt;安装和使用GNU parallel&lt;/h1&gt;

&lt;p&gt;执行这个命令安装::&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(wget -O - pi.dk/3 || curl pi.dk/3/) | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这么使用::&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parallel  --max-procs 8 echo {} ::: &amp;quot;1 7&amp;quot; &amp;quot;8 14&amp;quot; &amp;quot;15 21&amp;quot; &amp;quot;22 28&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个命令会让echo并行执行。8是指最多的计算机核数，&amp;rdquo;1 7&amp;rdquo;这些是传给echo的参数。
我学习并行的时间不足两小时。我试验的情况是，&amp;rdquo;1 7&amp;rdquo;是作为一个参数传入的，而不是两个。
所以如果你用的是perl::&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parallel  --max-procs 8 &#39;perl nll.pl&#39; {} ::: &amp;quot;events 2 2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，perl会认为你传入的是一个参数，内容是events空格2空格2，而不是3个。
目前，除了改perl脚本我还不知道这如何处理。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git常用命令</title>
      <link>http://blog.wangliang.one/archives/git-commands/</link>
      <pubDate>Fri, 04 Dec 2015 12:13:19 +0800</pubDate>
      
      <guid>http://blog.wangliang.one/archives/git-commands/</guid>
      <description>

&lt;p&gt;使用git，多数时候的思路是编辑、add、commit、push。
但是有时还需要回退、rebase等。
这部分命令往往因为使用较少，而常常记不清，所以进行一些总结。&lt;/p&gt;

&lt;h1 id=&#34;和提交有关&#34;&gt;和提交有关&lt;/h1&gt;

&lt;p&gt;添加或修改文件的修改提交到暂存区(记住：git跟踪的是修改！)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add &amp;lt;fileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除文件的修改提交到暂存区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm &amp;lt;fileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交到仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m&amp;quot;&amp;lt;提交理由&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将工作目录中已经跟踪的文件直接提交到仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -a
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;和撤销有关&#34;&gt;和撤销有关&lt;/h1&gt;

&lt;p&gt;撤销工作目录的修改&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -- &amp;lt;fileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;撤销到暂存区的提交&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset HEAD &amp;lt;fileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;版本库回退,修改放回工作区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;版本库回退,修改不放回工作区&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset --hard HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令撤销&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reflog
git reset --hard &amp;lt;commit_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;和变基提交有关&#34;&gt;和变基提交有关&lt;/h1&gt;

&lt;p&gt;手动变基&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase -i master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自动变基&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase master
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;和远程库有关&#34;&gt;和远程库有关&lt;/h1&gt;

&lt;p&gt;删除远程库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin --delete &amp;lt;branchName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Linux系统的kernel管理</title>
      <link>http://blog.wangliang.one/archives/manage-kernel/</link>
      <pubDate>Sat, 14 Nov 2015 15:34:05 +0800</pubDate>
      
      <guid>http://blog.wangliang.one/archives/manage-kernel/</guid>
      <description>

&lt;h1 id=&#34;什么是-kernel&#34;&gt;什么是 kernel&lt;/h1&gt;

&lt;p&gt;准确地说，Linux 只是各发行版的核心(kernel)，而不是一个完整的操作系统。
核心的作用是操作硬件。
那么核心或者说 kernel 究竟是什么呢？
其实，就是一个文件: /boot/vmlinuz-xxx (一部机器上可能有数个核心)。&lt;/p&gt;

&lt;h1 id=&#34;查看机器上有哪些-kernel&#34;&gt;查看机器上有哪些 kernel&lt;/h1&gt;

&lt;p&gt;.. code-block:: bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$uname -r
3.10.0-229.20.1.el7.x86_64

$rpm -qa | grep kernel | sort
kernel-3.10.0-229.11.1.el7.x86_64
kernel-3.10.0-229.14.1.el7.x86_64
kernel-3.10.0-229.20.1.el7.x86_64
kernel-devel-3.10.0-229.11.1.el7.x86_64
kernel-devel-3.10.0-229.14.1.el7.x86_64
kernel-devel-3.10.0-229.20.1.el7.x86_64
kernel-headers-3.10.0-229.20.1.el7.x86_64
kernel-tools-3.10.0-229.20.1.el7.x86_64
kernel-tools-libs-3.10.0-229.20.1.el7.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一个命令是查看机器目前使用的核心。
第二个命令是查看有哪些核心。
除了kernel外、kernel-devel、kernel-headers 和 kernel-tools这些是用于开发或者一些特别的程序需要。
不同的发行版，除了kernel外，其他的命名规则各有不同。
这里有几个 kernel 版本：3.10.0-229.11.1、3.10.0-229.14.1 和 3.10.0-229.20.1。
目前，正在使用的是3.10.0-229.20.1。&lt;/p&gt;

&lt;h1 id=&#34;删除不必要的-kernel&#34;&gt;删除不必要的 kernel&lt;/h1&gt;

&lt;p&gt;之前认为，kernel太多会影响开机速度。
现在据更专业的人士介绍，搜索内核只在生成grub.cfg时进行，记录在了配置文件grub-mkconfig中，所以多余的内核不会影响开机速度。
这与我的实际感受不同。
无论怎样，用一个kernel，保留一个kernel，这确实足够了。
另外，谨慎使用autoremove命令。有时，a依赖b。安装了a，进而b因为依赖安装上了，恰好b也是其他的东西需要的。
有一天a被删除，b可能会被错误地删除。所以不要轻易使用autoremove。
现在，删除最旧的kernel：3.10.0-229.11.1&lt;/p&gt;

&lt;p&gt;.. code-block:: bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo yum remove kernel-3.10.0-229.11.1.el7.x86_64
$sudo yum remove kernel-devel-3.10.0-229.11.1.el7.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;什么时候删除&#34;&gt;什么时候删除&lt;/h1&gt;

&lt;p&gt;Linux 系统会经常更新 kernel。
在 kernel 更新后，有了超过两个 kernel 就可以考虑删除不必要的 kernel 了。
那么如何知道 kernel 更新了呢？
每次开机时会显示 kernel，发现 kernel 增多后就可以看看是不是有超过两个kernel了。
也可以在更新时注意命令行输出。
另外，如果使用了 virtualbox，在 kernel 更新后，虚拟机必须重新编译核心后才能继续使用。
这时，你就知道 kernel 肯定已经更新了。&lt;/p&gt;

&lt;h1 id=&#34;脚本实现&#34;&gt;脚本实现&lt;/h1&gt;

&lt;p&gt;我已经写好一个Perl脚本，你可以在这里下载:
&lt;a href=&#34;https://github.com/PeterPanwl/Myinfo/blob/master/content/sourcecodes/manage-kernel/manage-kernel.pl&#34;&gt;https://github.com/PeterPanwl/Myinfo/blob/master/content/sourcecodes/manage-kernel/manage-kernel.pl&lt;/a&gt; 。
注意，如果这个脚本导致不良后果，\ &lt;strong&gt;我不负责&lt;/strong&gt;\。&lt;/p&gt;

&lt;h1 id=&#34;virtualbox的问题&#34;&gt;Virtualbox的问题&lt;/h1&gt;

&lt;p&gt;安装devel即可使用：&lt;/p&gt;

&lt;p&gt;.. code-block:: bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo yum install kernel-devel
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PATH环境变量修改总结</title>
      <link>http://blog.wangliang.one/archives/environment-PATH-variable/</link>
      <pubDate>Tue, 10 Nov 2015 21:33:43 +0800</pubDate>
      
      <guid>http://blog.wangliang.one/archives/environment-PATH-variable/</guid>
      <description>

&lt;h1 id=&#34;export命令&#34;&gt;export命令&lt;/h1&gt;

&lt;p&gt;export命令用于设置或显示环境变量。&lt;/p&gt;

&lt;h1 id=&#34;path变量&#34;&gt;PATH变量&lt;/h1&gt;

&lt;p&gt;PATH变量是环境变量中的一个，看下面的export命令理解如何增加PATH变量：&lt;/p&gt;

&lt;p&gt;.. code-block:: bash&lt;/p&gt;

&lt;p&gt;export PATH=${PATH}:/usr/local/texlive/2015/bin/x86_64-linux&lt;/p&gt;

&lt;p&gt;这句话是说：
PATH变量=原PATH变量的值+/usr/local/texlive/2015/bin/x86_64-linux&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>安装ibus和插件</title>
      <link>http://blog.wangliang.one/archives/ibus-centos/</link>
      <pubDate>Mon, 02 Nov 2015 15:34:05 +0800</pubDate>
      
      <guid>http://blog.wangliang.one/archives/ibus-centos/</guid>
      <description>

&lt;p&gt;只装ibus是不够的，还要安装插件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;sudo yum install ibus ibus-libpinyin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;设置&#34;&gt;设置&lt;/h2&gt;

&lt;p&gt;在上部面板的application里找setting，再找language 然后这样设置：&lt;/p&gt;

&lt;p&gt;语言：汉语中国&lt;/p&gt;

&lt;p&gt;格式：中国汉语&lt;/p&gt;

&lt;p&gt;输入源：intelligent Pinyin&lt;/p&gt;

&lt;p&gt;重启后注意选择保留原文件夹。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>